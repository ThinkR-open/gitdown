% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_commits.R
\name{get_commits_pattern}
\alias{get_commits_pattern}
\title{Get commits associated with a text pattern}
\usage{
get_commits_pattern(
  repo = ".",
  pattern = "#[[:digit:]]+",
  ref = "master",
  path = NULL,
  silent = FALSE
)
}
\arguments{
\item{repo}{a path to a repository or a \code{git_repository}
object. Default is '.'}

\item{pattern}{Pattern to look for.

The default interpretation is a regular expression, as described
in \link[stringi:stringi-search-regex]{stringi::stringi-search-regex}. Control options with
\code{\link[stringr:modifiers]{regex()}}.

Match a fixed string (i.e. by comparing only bytes), using
\code{\link[stringr:modifiers]{fixed()}}. This is fast, but approximate. Generally,
for matching human text, you'll want \code{\link[stringr:modifiers]{coll()}} which
respects character matching rules for the specified locale.

Match character, word, line and sentence boundaries with
\code{\link[stringr:modifiers]{boundary()}}. An empty pattern, "", is equivalent to
\code{boundary("character")}.}

\item{ref}{The name of a reference to list commits from e.g. a tag
or a branch. The default is NULL for the current branch.}

\item{path}{The path to a file. If not NULL, only commits modifying
this file will be returned. Note that modifying commits that
occurred before the file was given its present name are not
returned; that is, the output of \code{git log} with
\code{--no-follow} is reproduced.}

\item{silent}{Logical. Whether to hide messages.}
}
\value{
A tibble with commits and tags
}
\description{
Get commits associated with a text pattern
}
\examples{
repo <- fake_repo()
get_commits_pattern(repo = repo, pattern = "#[[:digit:]]+")
}
